@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject NavigationService NavigationService
@attribute [Authorize(Roles = "Administrator")]

<EditForm Model="@registerModel">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">CSV Bank Import</MudText>
        </TitleContent>
        <DialogContent>
            <div>
                <MudSelect T="long?" Label="Account" MultiSelection="false" @bind-SelectedValues="accountValues" MultiSelectionTextFunc="@(x => string.Join(", ", x.Select(s => accountArray?.FirstOrDefault(i => i.Id?.ToString() == s)?.Name)))" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var account in accountArray ?? Enumerable.Empty<Account>())
                    {
                        <MudSelectItem T="long?" Value="@account.Id">@account.Name</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <MudFileUpload T="IBrowserFile" FilesChanged="@(async args => registerModel.Photo = await UploadBankAccountCsvAsync(args))" Accept=".csv">
                <ActivatorContent>
                    
                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                        Upload CSV
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnClose">Close</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private Account[]? accountArray;
    private IEnumerable<long?>? accountValues;
    private AccountType record = new();
    string accountName = "";
    [CascadingParameter]
    IMudDialogInstance? MudDialog { get; set; }

    private RegisterModel registerModel = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            accountArray = await AppService.ListAccountAsync();
            var sortAccount = accountArray.OrderBy(s => s.Name).ToList();
            accountArray = sortAccount.ToArray();
            accountValues = record?.Account?.Select(x => x.Id).ToHashSet() ?? [];
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnClose()
    {
        MudDialog?.Close();
        NavigationService.NotifyStateChanged();

    }
    
    private async Task<string?> UploadBankAccountCsvAsync(IBrowserFile file)
    {
        if (file.ContentType != "text/csv")
        {
            Snackbar.Add("Only CSV files can be uploaded.", Severity.Error);
            return null;
        }

        try
        {
            var my =  accountValues?.Select(x => new Account { Id = x, Name = accountName }).FirstOrDefault();
            var myrecord = await AppService.GetAccountByIdAsync(my.Id);
            AppService.UploadBankAccountCsvAsync(file, myrecord.Name);
            MudDialog?.Close();
            NavigationService.NotifyStateChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }
}
