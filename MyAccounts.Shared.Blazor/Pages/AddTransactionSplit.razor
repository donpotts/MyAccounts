@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationService NavigationService
@inject HttpClient HttpClient

<EditForm Model="@record" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Add Transaction Split</MudText>
        </TitleContent>

        <DialogContent>
            <MudText Typo="Typo.h6" Style="@AmountStyle">Transaction Amount: @Amount.ToString("C")</MudText>
            <MudText Typo="Typo.h6" Style="@TotalAmountStyle">Total Split Amount: @totalAmount.ToString("C")</MudText>
            <MudDivider />
            <MudText Typo="Typo.h6" Style="@TotalSum">Sum of Amounts: @SumOfAmounts.ToString("C")</MudText>
            <MudAutocomplete T="long?" @bind-Value="record.CategoryId" Label="Category" AnchorOrigin="Origin.BottomCenter" SearchFunc="SearchCategories" ToStringFunc="@(id => categoryArray.FirstOrDefault(c => c.Id == id)?.Name)" />
            <div style="display: flex; align-items: center;">
                <MudNumericField @bind-Value="record.Amount" For="@(() => record.Amount)" Label="Amount" />
                <MudButton OnClick="ToggleSign" class="mt-5">-/+</MudButton>
            </div>
            <MudTextField @bind-Value="record.Notes" For="@(() => record.Notes)" Label="Notes" />
            <MudDataGrid T="TransactionSplit" @ref="grid" ServerData="(new Func<GridState<TransactionSplit>, Task<GridData<TransactionSplit>>>(ServerReload))" Filterable="true" AutoFit="true">
            <ToolBarContent>
                 <MudText Typo="Typo.h6">Transaction Split</MudText>
                 <MudSpacer />
            </ToolBarContent>
            <Columns>
                <PropertyColumn @ref="categoryColumn" Property="x => x!.Category != null ? x.Category.Name : null" Title="Category"/>
                <PropertyColumn Property="x => x!.Amount" Title="Amount" AggregateDefinition="_amountAggregation" />
                <PropertyColumn Property="x => x!.Notes" Title="Notes" />
                <TemplateColumn Style="width: 30px;" StickyRight="true" Sortable="false" Filterable="false">
                    <CellTemplate Context="cellContext">
                        <MudStack Row="true">
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@MudBlazor.Size.Small" Title="Edit" OnClick="@(e => OnEdit(cellContext.Item!))" />
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@MudBlazor.Size.Small" Title="Delete" OnClick="@(e => OnDelete(cellContext.Item!))" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="TransactionSplit" />
            </PagerContent>
        </MudDataGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="MudBlazor.Color.Primary" >Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [Parameter]
    public long Id { get; set; }

    [Parameter]
    public decimal Amount { get; set; }

    private void ToggleSign()
    {
        record.Amount = -record.Amount;
    }

    private decimal totalAmount { get; set; } = 0;
    private decimal SumOfAmounts => Amount - totalAmount;
    private MudDataGrid<TransactionSplit>? grid;
    private PropertyColumn<TransactionSplit, decimal?>? transactionColumn;
    private PropertyColumn<TransactionSplit, string?>? categoryColumn;

    private async Task<IEnumerable<long?>> SearchCategories(string value)
    {
        var filteredCategories = categoryArray.Where(c => c.Name != "Split");

        if (string.IsNullOrEmpty(value))
            return categoryArray.Select(c => (long?)c.Id);

        return categoryArray
            .Where(c => c.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(c => (long?)c.Id);
    }

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    //private Transaction[]? transactionArray;
    private Category[]? categoryArray;
    private TransactionSplit[]? transactionSplitArray;
    private TransactionSplit record = new();

    private string AmountStyle => $"color: {(Amount >= 0 ? "green" : "red")};";
    private string TotalAmountStyle => $"color: {(totalAmount >= 0 ? "green" : "red")};";
    private string TotalSum => $"color: {(SumOfAmounts == 0 ? "green" : "red")};";

    AggregateDefinition<TransactionSplit> _amountAggregation = new AggregateDefinition<TransactionSplit>
        {
            Type = AggregateType.Sum,
            CustomAggregate = x =>
            {
                var tAmount = x.Sum(z => z.Amount);
                return $"Total: {tAmount:C0}";
            }
        };


    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            //transactionArray = await AppService.ListTransactionAsync();
            categoryArray = await AppService.ListCategoryAsync();
            var sortCategory = categoryArray.OrderBy(s => s.Name).ToList();
            categoryArray = sortCategory.ToArray();
            await (grid?.ReloadServerData());
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<GridData<TransactionSplit>> ServerReload(GridState<TransactionSplit> state)
    {
        var top = state.PageSize;
        var skip = state.Page * state.PageSize;
        var orderby = ODataHelpers.GetOrderBy(state.SortDefinitions);
        var filter = ODataHelpers.GetFilter(state.FilterDefinitions);

        // Add filter to match TransactionId with the provided Id parameter
        filter = string.IsNullOrEmpty(filter) ? $"TransactionId eq {Id}" : $"{filter} and TransactionId eq {Id}";

        AppService.ODataResult<TransactionSplit>? result = null;

        try
        {
            orderby = "Category/Name asc";
            result = await AppService.ListTransactionSplitODataAsync(top, skip, orderby, filter, true, "Transaction,Category");
            totalAmount = result.Value.Sum(a => a.Amount) ?? 0;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        return new() { TotalItems = result?.Count ?? 0, Items = result?.Value ?? Enumerable.Empty<TransactionSplit>() };
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        if (record.Amount == null || record.Amount == 0)
        {
            Snackbar.Add("Amount must be <> 0", Severity.Error);
            return;
        }
            
        try
        {
            record.TransactionId = Id;
            if (record.CategoryId == null)
                record.CategoryId = 1;
                        
            await AppService.InsertTransactionSplitAsync(record);
            await (grid?.ReloadServerData());
            NavigationService.NotifyStateChanged();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async void OnEdit(TransactionSplit record)
    {
        DialogParameters<UpdateTransactionSplit> dialogParams = new() { { x => x.Id, record.Id!.Value } };
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<UpdateTransactionSplit>("Update TransactionSplit", dialogParams, dialogOptions).Result;

        if (!result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
            NavigationService.NotifyStateChanged();
            StateHasChanged();
        }
    }

    private async void OnDelete(TransactionSplit record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this record?",
            "Delete",
            "Cancel");

        if (result.GetValueOrDefault(false))
        {
            try
            {
                await AppService.DeleteTransactionSplitAsync(record.Id!.Value);
                await (grid?.ReloadServerData() ?? Task.CompletedTask);
                NavigationService.NotifyStateChanged();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

}
