@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject NavigationService NavigationService
@attribute [Authorize(Roles = "Administrator")]

@if (record == null)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Update Account</MudText>
        </TitleContent>
        <DialogContent>
            <MudText>Loading...</MudText>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton Color="MudBlazor.Color.Primary" Disabled="true">Update</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <EditForm Model="@record" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">Update Account</MudText>
            </TitleContent>
            <DialogContent>
                @* <MudNumericField @bind-Value="record.Id" For="@(() => record.Id)" Label="Id" ReadOnly="true" /> *@
                <MudTextField @bind-Value="record.Name" For="@(() => record.Name)" Label="Name" />
                @* <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.Date" For="@(() => record.Date)" Label="Date" />
                <MudNumericField @bind-Value="record.Balance" For="@(() => record.Balance)" Label="Balance" /> *@
                <MudSelect @bind-Value="record.AccountTypeId" For="@(() => record.AccountTypeId)" Label="Account Type" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="long?" Value="null" />
                    @foreach (var accountType in accountTypeArray ?? Enumerable.Empty<AccountType>())
                    {
                        <MudSelectItem Value="@accountType.Id">@accountType.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudCheckBox @bind-Value="record.BudgetAccount" Label="Budget Account"></MudCheckBox>
                <MudTextField @bind-Value="record.Note" For="@(() => record.Note)" Label="Note" />
                @* <MudSelect T="long?" Label="Category" MultiSelection="true" @bind-SelectedValues="categoryValues" MultiSelectionTextFunc="@(x => string.Join(", ", x.Select(s => categoryArray?.FirstOrDefault(i => i.Id?.ToString() == s)?.Name)))" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var category in categoryArray ?? Enumerable.Empty<Category>())
                    {
                        <MudSelectItem T="long?" Value="@category.Id">@category.Name</MudSelectItem>
                    }
                </MudSelect> *@
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="OnCancel">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="MudBlazor.Color.Primary">Update</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [Parameter]
    public long Id { get; set; }

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private AccountType[]? accountTypeArray;
    private Category[]? categoryArray;
    private IEnumerable<long?>? categoryValues;
    private Account? record;

    private async Task<IEnumerable<long?>> SearchCategories(string value)
    {
        var filteredCategories = categoryArray.Where(c => c.Name != "Split");

        if (string.IsNullOrEmpty(value))
            return categoryArray.Select(c => (long?)c.Id);

        return categoryArray
            .Where(c => c.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(c => (long?)c.Id);
    }

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            accountTypeArray = await AppService.ListAccountTypeAsync();
            var sortAccount = accountTypeArray.OrderBy(s => s.Name).ToList();
            accountTypeArray = sortAccount.ToArray();
            categoryArray = await AppService.ListCategoryAsync();
            var sortCategory = categoryArray.OrderBy(s => s.Name).ToList();
            categoryArray = sortCategory.ToArray();
            record = await AppService.GetAccountByIdAsync(Id);
            categoryValues = record?.Category?.Select(x => x.Id).ToHashSet() ?? [];
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        if (record == null)
        {
            return;
        }

        try
        {
            record.Category = categoryValues?.Select(x => new Category { Id = x }).ToList();
            await AppService.UpdateAccountAsync(Id, record);
            MudDialog?.Close();
            NavigationService.NotifyStateChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }
}
