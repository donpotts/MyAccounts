@page "/transaction/{AccountName}"
@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationService NavigationService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject ThemeService ThemeService
@using MyAccounts.Shared.Blazor.Components.Themes

@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Transaction</PageTitle>

<div class="mb-3"> 
    @if (@AccountName == "all")
    {
        <MudText Typo="Typo.h3">All Transactions</MudText>
    }
    else
    {
        <MudText Typo="Typo.h3" >@AccountName</MudText>
    }
</div>

<div class="date-range-picker">
    <MudDateRangePicker DateRange="dateRange" DateRangeChanged="OnDateRangeChanged" Label="Select Date Range" Class="small-date-picker" />
</div>

<MudText Typo="Typo.h6">Total Expenses: @totalSum.ToString("C")</MudText>

@if (Data != null && Data.Count > 0)
{
    <ApexChart TItem="TransactionCategoryData"
    Title=""
    Width="700"
    Height="700"
    @ref="chart"
    Options=options
    OnDataPointSelection="HandleDataPointSelection">

        <ApexPointTooltip>
            <MudCard>
                <MudCardContent>
                    <MudText>@context.DataPoint.X @* The percentage is coded into the category name *@</MudText>
                    <MudText Typo="Typo.body2">@context.DataPoint.Items.Sum(x => x.TotalAmount).ToString("C")</MudText>
                </MudCardContent>
            </MudCard>
        </ApexPointTooltip>

        <ChildContent>
            <ApexPointSeries TItem="TransactionCategoryData"
            Items="Data"
            Name="Expenses"
            SeriesType="SeriesType.Pie"
            XValue="e => e.Category"
            YValue="e => e.TotalAmount"
            ShowDataLabels/>
        </ChildContent>
    </ApexChart>
}

<MudStack AlignItems="AlignItems.End" Class="mb-3">
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCircleOutline" Color="MudBlazor.Color.Primary" OnClick="@(e => OnAdd())" Disabled="@isDisabled">Add</MudButton>
</MudStack>

<MudDataGrid T="Transaction" @ref="grid" Hover="true" ServerData="(new Func<GridState<Transaction>, Task<GridData<Transaction>>>(ServerReload))" Filterable="true" RowClass="cursor-pointer" RowClassFunc="@SelectedRow" RowClick="RowClicked" SelectedItem="@selectedItem">
    <ToolBarContent>
        @if (!string.IsNullOrEmpty(Totals))
        {
            var colorClass = decimal.TryParse(Totals.Replace("$",""), out var totalValue) && totalValue <= 0 ? "text-red" : "text-green";
            <MudText Typo="Typo.h6">Today's Balance =&nbsp;</MudText>
            <MudText Typo="Typo.h6" Class="@colorClass">@Totals</MudText>
        }
        <MudSpacer />
        <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0" Immediate="true" ValueChanged="@(value => SearchChanged(value))"></MudTextField>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="ExportAllToCSV">Export</MudButton>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x!.Id" Title="Id" />
        <PropertyColumn Property="x => x!.Date" Title="Date" />
        <PropertyColumn Property="x => x!.Payee" Title="Payee" />
        <TemplateColumn Title="Cleared" Sortable="true">
            <CellTemplate Context="context">
                <MudCheckBox Value="@context.Item.Cleared" Disabled="true" />
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Amount" Sortable="true">
            <CellTemplate Context="context">
                @if (@context.Item.Amount != null)
                {
                    <div class="@(context.Item == selectedItem ? "default-color" : (context.Item.Amount > 0 ? "text-green" : "text-red"))">
                        @FormatCurrency(context.Item.Amount.ToString() ?? "$0.00")
                    </div>
                }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Balance" Sortable="true">
            <CellTemplate Context="context">
                @if (@context.Item.Balance != null)
                {
                    <div class="@(context.Item == selectedItem ? " default-color" : (context.Item.Balance>
                        0 ? "text-green" : "text-red"))">
                        @FormatCurrency(context.Item.Balance.ToString() ?? "$0.00")
                    </div>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x!.Description" Title="Description" />
        <PropertyColumn @ref="accountColumn" Property="x => x!.Account != null ? x.Account.Name : null" Title="Account" />
        <TemplateColumn T="Transaction" Title="Category">
            <CellTemplate>
                @if (context.Item.Category.Name == "Split")
                {
                    <MudButton Color="MudBlazor.Color.Default" OnClick="@(e => ShowEditDialog(context.Item))">@context.Item.Category.Name</MudButton>
                }
                else
                {
                    <MudText>@context.Item.Category.Name</MudText>
                }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Style="width: 50px;" StickyRight="true" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudStack Row="true">
                    <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@MudBlazor.Size.Small" Title="Edit" OnClick="@(e => OnEdit(context.Item!))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.FileCopy" Size="@MudBlazor.Size.Small" Title="Re-occurring" OnClick="@(e => OnReoccurring(context.Item!))" />
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@MudBlazor.Size.Small" Title="Delete" OnClick="@(e => OnDelete(context.Item!))" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Transaction" PageSizeOptions="new int[] { 10, 20, 50, 100, 250, 500, 750, 1000 }" />
    </PagerContent>
</MudDataGrid>
<script>
    window.downloadFromBase64 = function (base64, filename) {
    var a = document.createElement("a");
    document.body.appendChild(a);
    a.style = "display: none";
    var byteCharacters = atob(base64);
    var byteNumbers = new Array(byteCharacters.length);
    for (var i = 0; i < byteCharacters.length; i++) {
    byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    var byteArray = new Uint8Array(byteNumbers);
    var blob = new Blob([byteArray], { type: "application/octet-stream" });
    var url = window.URL.createObjectURL(blob);
    a.href = url;
    a.download = filename;
    a.click();
    window.URL.revokeObjectURL(url);
    };
</script>

@code {
    [Parameter]
    public string AccountName { get; set; } = null;
    public string CategoryName { get; set; } = null;
    private List<TransactionCategoryData> Data { get; set; } = new();
    private ApexChart<TransactionCategoryData> chart;
    private ApexChartOptions<TransactionCategoryData> options { get; set; } = new();

    int? top = null;
    int? skip = null;
    string? orderby = null;
    string? filter = null;
    private DateRange dateRange = new DateRange(
    new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1),
    new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month))
    );

    private List<ChartSeries> chartData = new();
    private double[] data;
    private string[] labels;
    private int IndexHolder;

    private string Totals { get; set; }
    private bool isDisabled = false;
    private MudDataGrid<Transaction>? grid;
    private PropertyColumn<Transaction, string?>? accountColumn;

    private PropertyColumn<Transaction, string?>? categoryColumn;

    private string? _searchString;

    private int selectedRowNumber = -1;
    private Transaction selectedItem = null;

    int clickedRow = -1;
    private bool isDarkMode;

    private double totalSum;

    protected override async Task OnInitializedAsync()
    {
        ThemeService.OnChange += UpdateExpensesPieChart;
        chart = new ApexChart<TransactionCategoryData>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    { 
        if (firstRender && Data != null) { await chart.RenderAsync(); }
    }

    private async void HandleDataPointSelection(SelectedData<TransactionCategoryData> selectedData)
    {
        var dataId = selectedData.DataPoint.Items.FirstOrDefault()?.Category;
        if (dataId != null)
        {
            var categoryWithoutPercent = dataId.Split('(')[0].Trim();
            dataId = categoryWithoutPercent;
            CategoryName = dataId;
            if (grid != null)
            {
                await (grid?.ReloadServerData() ?? Task.CompletedTask);
            }
            //await ReloadData();
            StateHasChanged();
        }
    }

    private async void UpdateExpensesPieChart()
    {        
        options = new ApexChartOptions<TransactionCategoryData>
        {
            Theme = new Theme()
        };

        isDarkMode = ThemeService.IsDarkMode;
        if (isDarkMode)
        {
            options.Theme.Mode = Mode.Dark;
            options.Chart.Background = "var(--mud-palette-background-dark)";

        }
        else
        {
            options.Theme.Mode = Mode.Light;
            options.Chart.Background = "var(--mud-palette-background)";
        }
        await ResetChart();

        StateHasChanged();
    }

    private string SelectedRow(Transaction transaction, int rowNumber)
    {
        if (grid.SelectedItem != null && grid.SelectedItem.Equals(transaction))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else if (grid.SelectedItem == null && transaction.Date <= DateOnly.FromDateTime(DateTime.Today))
        {
            grid.SelectedItem = transaction;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    void RowClicked(DataGridRowClickEventArgs<Transaction> args)
    {
        selectedItem = args.Item;

        if (clickedRow == args.RowIndex)
        {
            // clicked twice
            OnEdit(args.Item);
        }
        else
        {
            clickedRow = args.RowIndex;
        }
    }

    private async Task<string> AccountTotals(string AccountName)
    {
        decimal totalsAsDecimal = 0;
        Totals = await AppService.GetTransactionTotals(AccountName);
        Decimal.TryParse(Totals, out totalsAsDecimal);

        return totalsAsDecimal.ToString("C");
    }

    private async Task ResetChart()
    {
        options.DataLabels = new DataLabels
            {
                Formatter = @"function(value, { seriesIndex, w }) {
            return '$' + w.config.series[seriesIndex].toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });}"
            };
        await chart.UpdateOptionsAsync(true, true, true, null);
    }

    public class TransactionCategoryData
    {
        public string Category { get; set; }
        public decimal TotalAmount { get; set; }
    }

    private List<ChartSeries> ConvertToChartSeries(List<TransactionCategoryData> data)
    {
        return data.Select(d => new ChartSeries
            {
                Name = d.Category,
                Data = new double[] { (double)d.TotalAmount }
            }).ToList();
    }

    protected override async Task OnParametersSetAsync()
    {
        selectedItem = null;
        await ReloadData();
        Totals = await AccountTotals(AccountName);
        UpdateExpensesPieChart();
        StateHasChanged();
    }

    private async Task OnDateRangeChanged(DateRange newDateRange)
    {
        dateRange = newDateRange;
        await ReloadData();
        UpdateExpensesPieChart();
        StateHasChanged();
    }

    private async Task ReloadData()
    {
        isDisabled = AccountName == "all";
        if (grid != null)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
        }

        filter = BuildFilter();

        string sorderby = "Date ASC";
        try
        {
            var myresult = await AppService.ListTransactionODataAsync(null, null, sorderby, filter, true, "Account,Category");

            var transactionIds = myresult?.Value.Select(t => t.Id).ToList();
            var sfilter2 = $"Transaction/Id in ({string.Join(",", transactionIds)})";
            var myresult2 = await AppService.ListTransactionSplitODataAsync(null, null, null, sfilter2, true, "Transaction,Category");

            var groupedData = GroupTransactions(myresult?.Value, myresult2?.Value);

            CalculateDataAndLabels(groupedData);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
            await ((IdentityAuthenticationStateProvider)AuthenticationStateProvider).LogoutAsync();
            Navigation.NavigateTo("/login");

            StateHasChanged();
        }
    }

    private string BuildFilter()
    {
        // Console.WriteLine($"Start Date: {dateRange.Start:yyyy-MM-ddTHH:mm:ssZ}");
        // Console.WriteLine($"End Date: {dateRange.End:yyyy-MM-ddTHH:mm:ssZ}");
        //Console.WriteLine("Category="+CategoryName);

        if (!isDisabled)
        {
            return $"(Account/Name eq '{AccountName}') and ((Date ge {dateRange.Start:yyyy-MM-dd} and Date le {dateRange.End:yyyy-MM-dd}) or Date eq {dateRange.Start:yyyy-MM-dd})";
        }
        else
        {
            return $"((Date ge {dateRange.Start:yyyy-MM-dd} and Date le {dateRange.End:yyyy-MM-dd}) or Date eq {dateRange.Start:yyyy-MM-dd})";
        }

    }

    private List<TransactionCategoryData> GroupTransactions(IEnumerable<Transaction> transactions, IEnumerable<TransactionSplit> transactionSplits)
    {
        var filteredTransactions = transactions.Where(t => t.Amount <= 0 && t.Category.Name != "Split" && !t.Category.Name.StartsWith("Transfer:["));
        var filteredTransactionSplits = transactionSplits.Where(t => t.Amount <= 0);

        var groupedDataSplit = filteredTransactionSplits.GroupBy(t => t.Category.Name)
                                              .Select(g => new TransactionCategoryData
                                                  {
                                                      Category = g.Key,
                                                      TotalAmount = g.Sum(t => (decimal)t.Amount)
                                                  }).ToList();

        var groupedData = filteredTransactions.GroupBy(t => t.Category.Name)
                                              .Select(g => new TransactionCategoryData
                                                  {
                                                      Category = g.Key,
                                                      TotalAmount = g.Sum(t => (decimal)t.Amount)
                                                  }).ToList();

        foreach (var split in groupedDataSplit)
        {
            var existingCategory = groupedData.FirstOrDefault(g => g.Category == split.Category);
            if (existingCategory != null)
            {
                existingCategory.TotalAmount += split.TotalAmount;
            }
            else
            {
                groupedData.Add(split);
            }
        }

        return groupedData;
    }

    private async void CalculateDataAndLabels(List<TransactionCategoryData> groupedData)
    {
        totalSum = groupedData.Sum(g => (double)g.TotalAmount);

        data = groupedData.Select(g => ((double)g.TotalAmount / totalSum) * 100).ToArray();
        labels = groupedData.Select(g => $"{g.Category}: {g.TotalAmount} ({((double)g.TotalAmount / totalSum) * 100:F2}%)").ToArray();

        // for (int i = 0; i < data.Length; i++)
        // {
        //     Console.WriteLine($"Category: {labels[i]}, Percentage: {data[i]}%");
        // }

        Data.Clear();
        await ResetChart();
        foreach (var item in groupedData)
        {
            item.TotalAmount = Math.Abs(item.TotalAmount);
            item.Category = item.Category.Replace(":", " ") + $" ({(Math.Abs((double)item.TotalAmount / totalSum)) * 100:F2}%)";
            Data.Add(item);
        }
    }


    private string FormatCurrency(string amount)
    {
        if (decimal.TryParse(amount, out decimal parsedAmount))
        {
            return parsedAmount.ToString("C");
        }
        else
        {
            return "$0.00";
        }
    }

    private async void ShowEditDialog(Transaction transaction)
    {
        DialogParameters<AddTransactionSplit> dialogParams = new() { { x => x.Id, transaction.Id!.Value } };
        dialogParams.Add("Amount", transaction.Amount);
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<AddTransactionSplit>("Add/Update Transaction Split(s)", dialogParams, dialogOptions).Result;

        if (!result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
            await ReloadData();
            NavigationService.NotifyStateChanged();
            await ResetChart();
        }
    }

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    private async Task<GridData<Transaction>> ServerReload(GridState<Transaction> state)
    {
        top = state.PageSize;
        skip = state.Page * state.PageSize;
        orderby = ODataHelpers.GetOrderBy(state.SortDefinitions);
        filter = ODataHelpers.GetFilter(state.FilterDefinitions);

        if (!string.IsNullOrEmpty(accountColumn?.PropertyName))
        {
            orderby = orderby?.Replace(accountColumn.PropertyName, "Account/Name");
            filter = filter?.Replace(accountColumn.PropertyName, "Account/Name");
        }

        if (!string.IsNullOrEmpty(categoryColumn?.PropertyName))
        {
            orderby = orderby?.Replace(categoryColumn.PropertyName, "Category/Name");
            filter = filter?.Replace(categoryColumn.PropertyName, "Category/Name");
        }

        AppService.ODataResult<Transaction>? result = null;

        try
        {
            if (_searchString?.Length > 0)
            {
                bool isNumeric = double.TryParse(_searchString, out _);
                bool isDateTime = DateTime.TryParse(_searchString, out _);

                if (isNumeric)
                {
                    filter = $"Id eq {_searchString} or Amount eq {_searchString} or Balance eq {_searchString}";
                }
                else if (isDateTime)
                {
                    filter = $"Date ge cast({_searchString},Edm.DateTimeOffset)";
                }
                else
                {
                    filter = $"contains(tolower(Payee), '{_searchString}') or contains(tolower(Description), '{_searchString}') or contains(tolower(Category/Name), '{_searchString}') or contains(tolower(Account/Name), '{_searchString}')";
                }
            }

            if (!string.IsNullOrEmpty(AccountName) && AccountName != "all")
            {
                if (!string.IsNullOrEmpty(filter))
                    filter = $"(Account/Name eq '{AccountName}') and ({filter})";
                else
                    filter = $"(Account/Name eq '{AccountName}')";
            }

            // Apply date range filter
            // if (dateRange != null)
            // {
            //     string dateFilter = $"Date ge {dateRange.Start:yyyy-MM-dd} and Date le {dateRange.End:yyyy-MM-dd}";
            //     if (!string.IsNullOrEmpty(filter))
            //         filter = $"{filter} and ({dateFilter})";
            //     else
            //         filter = dateFilter;
            // }

            // if (!string.IsNullOrEmpty(CategoryName))
            // {
            //     if (!string.IsNullOrEmpty(filter))
            //         filter = filter + $" and contains(Category/Name, '{CategoryName}')";
            //     else
            //         filter = $"contains(Category/Name, '{CategoryName}')";

            //     CategoryName = null;
            // }

            if (string.IsNullOrEmpty(orderby))
                orderby = "Date DESC, Id DESC";

            result = await AppService.ListTransactionODataAsync(top, skip, orderby, filter, true, "Account,Category");

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return new() { TotalItems = result?.Count ?? 0, Items = result?.Value ?? Enumerable.Empty<Transaction>() };
    }

    private async void OnAdd()
    {
        DialogParameters<AddTransaction> dialogParams = new() ;
        dialogParams.Add("Account", AccountName);

        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<AddTransaction>("Add Transaction", dialogParams, dialogOptions).Result;

        if (!result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
            await ReloadData();
            NavigationService.NotifyStateChanged();
            await ResetChart();
            StateHasChanged();
        }
    }

    private async void OnEdit(Transaction record)
    {
        DialogParameters<UpdateTransaction> dialogParams = new() { { x => x.Id, record.Id!.Value } };
        DialogOptions dialogOptions = new() { FullWidth = true, CloseOnEscapeKey = true };

        var result = await DialogService.Show<UpdateTransaction>("Update Transaction", dialogParams, dialogOptions).Result;

        if (!result.Canceled)
        {
            await (grid?.ReloadServerData() ?? Task.CompletedTask);
            await ReloadData();
            NavigationService.NotifyStateChanged();
            await ResetChart();
            StateHasChanged();
        }
    }

    private async void OnReoccurring(Transaction record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to create re-occurring transactions for this record until December, starting with next month?",
            "OK",
            "Cancel");

        if (result.GetValueOrDefault(false))
        {
            try
            {
                var currentMonth = DateTime.Now.Month;
                var tempRecord = new Transaction
                    {
                        AccountId = record.AccountId,
                        CategoryId = record.CategoryId,
                        Payee = record.Payee,
                        Cleared = record.Cleared,
                        Amount = record.Amount,
                        Balance = record.Balance,
                        Description = record.Description
                    };

                for (int month = currentMonth + 1; month <= 12; month++)
                {
                    int day = record.Date.Value.Day;
                    int year = record.Date.Value.Year;
                    tempRecord.Date = new DateOnly(year, month, day);

                    await AppService.InsertTransactionAsync(tempRecord);
                }

                await (grid?.ReloadServerData() ?? Task.CompletedTask);
                await ReloadData();
                NavigationService.NotifyStateChanged();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    private async void OnDelete(Transaction record)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this record?",
            "Delete",
            "Cancel");

        if (result.GetValueOrDefault(false))
        {
            try
            {
                await AppService.DeleteTransactionAsync(record.Id!.Value);
                await (grid?.ReloadServerData() ?? Task.CompletedTask);
                await ReloadData();
                NavigationService.NotifyStateChanged();
                await ResetChart();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    private void SearchChanged(string Value)
    {
        if (Value.EndsWith("."))
        {
            return;
        }
        _searchString = Value.ToString().ToLower();
        try
        {
            if (_searchString.Length > 18)
            {
                DateTimeOffset dateTime = DateTime.Parse(_searchString);
                _searchString = dateTime.ToString("yyyy-MM-ddTHH:mm:ssK");
                //Console.WriteLine(_searchString);
            }
        }
        catch
        {
            return;
        }
        grid?.ReloadServerData();
    }

    private async Task ExportAllToCSV()
    {
        AppService.ODataResult<Transaction>? result = null;

        try
        {
            // Fetch all data from the OData service without any filters or restrictions
            result = await AppService.ListTransactionODataAsync(null, null, orderby, filter, true, "Account,Category");
            //result = await (grid?.ReloadServerData() ?? Task.CompletedTask);

            if (result != null && result?.Value != null)
            {
                var ar = result?.Value.ToList().Select(x => new
                {
                    x.Id,
                    x.Date,
                    x.Payee,
                    x.Cleared,
                    x.Amount,
                    x.Balance,
                    x.Description,
                    AccountName = x.Account.Name,
                    CategoryName = x.Category.Name,
                });

                using var memoryStream = new MemoryStream();
                using (var writer = new StreamWriter(memoryStream))
                using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
                {
                    csv.WriteRecords(ar); // use CSVHelper to write the records to the CSV file
                }
                // Convert MemoryStream to ByteArray
                var byteArray = memoryStream.ToArray();

                // Convert ByteArray to Base64String
                var base64 = Convert.ToBase64String(byteArray);

                // Trigger file download
                await JSRuntime.InvokeVoidAsync("downloadFromBase64", base64, "Transaction_" + System.DateTime.Now.ToString("yyyyMMddHHmmss") + ".csv");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
