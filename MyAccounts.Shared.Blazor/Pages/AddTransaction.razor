@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject NavigationService NavigationService
@attribute [Authorize]

<EditForm Model="@record" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Add Transaction</MudText>
        </TitleContent>
        <DialogContent>
            <MudDatePicker Label="Date" @bind-Date="dateTime"/>
            <MudTextField @bind-Value="record.Payee" For="@(() => record.Payee)" Label="Payee" />
            <MudCheckBox @bind-Checked="record.Cleared" For="@(() => record.Cleared)" Label="Cleared" />
            <div style="display: flex; align-items: center;">
                <MudNumericField @bind-Value="record.Amount" For="@(() => record.Amount)" Label="Amount" />
                <MudButton OnClick="ToggleSign" class="mt-5">-/+</MudButton>
            </div>
            <MudTextField @bind-Value="record.Description" For="@(() => record.Description)" Label="Description" />
            <MudAutocomplete T="long?" @bind-Value="record.CategoryId" Label="Category" AnchorOrigin="Origin.BottomCenter" SearchFunc="SearchCategories" ToStringFunc="@(id => categoryArray.FirstOrDefault(c => c.Id == id)?.Name)" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="MudBlazor.Color.Primary">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    [Parameter]
    public string Account { get; set; }

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private Account[]? accountArray;
    private Category[]? categoryArray;
    private Transaction record = new();
    private DateTime dateNow = DateTime.Now;

    private DateTime? dateTime;

    private void ToggleSign()
    {
        record.Amount = -record.Amount;
    }
    
    private async Task<IEnumerable<long?>> SearchCategories(string value)
    {
        var filteredCategories = categoryArray.Where(c => c.Name != "Split");

        if (string.IsNullOrEmpty(value))
            return categoryArray.Select(c => (long?)c.Id);

        return categoryArray
            .Where(c => c.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(c => (long?)c.Id);
    }

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            accountArray = await AppService.ListAccountAsync();
            categoryArray = await AppService.ListCategoryAsync();
            var sortCategory = categoryArray.OrderBy(s => s.Name).ToList();
            categoryArray = sortCategory.ToArray();
            
            record.Date = DateOnly.FromDateTime(dateNow);
            dateTime = dateNow;
                        
            if (categoryArray != null)
            foreach (var account in accountArray)
            {
                if (Account == account.Name)
                {
                    record.AccountId = account.Id;
                }
            }
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        try
        {
            if (record.CategoryId == null)
                record.CategoryId = 1;
            
            record.Date = DateOnly.FromDateTime(dateTime.Value);

            await AppService.InsertTransactionAsync(record);
            MudDialog?.Close();
            NavigationService.NotifyStateChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }
}
