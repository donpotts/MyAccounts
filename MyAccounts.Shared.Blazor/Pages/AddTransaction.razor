@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject NavigationService NavigationService
@attribute [Authorize]

<EditForm Model="@record" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Add Transaction</MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.Date" For="@(() => record.Date)" Label="Date" />
            <MudTextField @bind-Value="record.Payee" For="@(() => record.Payee)" Label="Payee" />
            <MudCheckBox @bind-Checked="record.Cleared" For="@(() => record.Cleared)" Label="Cleared" />
            <MudNumericField @bind-Value="record.Amount" For="@(() => record.Amount)" Label="Amount" />
            <MudNumericField @bind-Value="record.Balance" For="@(() => record.Balance)" Label="Balance" />
            <MudTextField @bind-Value="record.Description" For="@(() => record.Description)" Label="Description" />
            <MudSelect @bind-Value="record.AccountId" For="@(() => record.AccountId)" Label="Account" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem T="long?" Value="null" />
                @foreach (var account in accountArray ?? Enumerable.Empty<Account>())
                {
                    <MudSelectItem Value="@account.Id">@account.Name</MudSelectItem>
                }
            </MudSelect>
            <MudSelect @bind-Value="record.CategoryId" For="@(() => record.CategoryId)" Label="Category" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem T="long?" Value="null" />
                @foreach (var category in categoryArray ?? Enumerable.Empty<Category>())
                {
                    <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                }
            </MudSelect>

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private Account[]? accountArray;
    private Category[]? categoryArray;
    private Transaction record = new();
    private DateTime dateNow = DateTime.Now;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            accountArray = await AppService.ListAccountAsync();
            categoryArray = await AppService.ListCategoryAsync();
            record.Date = dateNow;
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        try
        {
            await AppService.InsertTransactionAsync(record);
            MudDialog?.Close();
            NavigationService.NotifyStateChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }
}
