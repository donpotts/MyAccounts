@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject NavigationService NavigationService
@attribute [Authorize(Roles = "Administrator")]

<EditForm Model="@record" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Add Account Type</MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField @bind-Value="record.Name" For="@(() => record.Name)" Label="Name" />
            <MudSelect T="long?" Label="Account" MultiSelection="true" @bind-SelectedValues="accountValues" MultiSelectionTextFunc="@(x => string.Join(", ", x.Select(s => accountArray?.FirstOrDefault(i => i.Id?.ToString() == s)?.Name)))" AnchorOrigin="Origin.BottomCenter">
                @foreach (var account in accountArray ?? Enumerable.Empty<Account>())
                {
                    <MudSelectItem T="long?" Value="@account.Id">@account.Name</MudSelectItem>
                }
            </MudSelect>

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="MudBlazor.Color.Primary">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private Account[]? accountArray;
    private IEnumerable<long?>? accountValues;
    private AccountType record = new();

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            accountArray = await AppService.ListAccountAsync();
            var sortAccount = accountArray.OrderBy(s => s.Name).ToList();
            accountArray = sortAccount.ToArray();

            accountValues = record?.Account?.Select(x => x.Id).ToHashSet() ?? [];
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        try
        {
            record.Account = accountValues?.Select(x => new Account { Id = x }).ToList();
            await AppService.InsertAccountTypeAsync(record);
            MudDialog?.Close();
            NavigationService.NotifyStateChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }
}
