@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

<EditForm Model="@record" OnValidSubmit="@OnSubmit">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Add Budget Expense</MudText>
        </TitleContent>
        <DialogContent>
            <MudTextField @bind-Value="record.Category" For="@(() => record.Category)" Label="Category" />
            <MudNumericField @bind-Value="record.APR" For="@(() => record.APR)" Label="APR" />
            <MudTextField @bind-Value="record.StartDate" For="@(() => record.StartDate)" Label="Start Date" />
            <MudTextField @bind-Value="record.DueDate" For="@(() => record.DueDate)" Label="Due Date" />
            <MudTextField @bind-Value="record.CreditLimit" For="@(() => record.CreditLimit)" Label="Credit Limit" />
            <MudNumericField @bind-Value="record.MinPay" For="@(() => record.MinPay)" Label="Min Payment" />
            <MudNumericField @bind-Value="record.Interest" For="@(() => record.Interest)" Label="Interest" />
            <MudNumericField @bind-Value="record.Balance" For="@(() => record.Balance)" Label="Balance" />
            <MudNumericField @bind-Value="record.Pay" For="@(() => record.Pay)" Label="Payment" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="MudBlazor.Color.Primary">Add</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    IMudDialogInstance? MudDialog { get; set; }

    private BudgetExpense record = new();

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        try
        {
            await AppService.InsertBudgetExpenseAsync(record);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }
}
