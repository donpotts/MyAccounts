@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

@if (record == null)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Update Transaction</MudText>
        </TitleContent>
        <DialogContent>
            <MudText>Loading...</MudText>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" Disabled="true">Update</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <EditForm Model="@record" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">Update Transaction</MudText>
            </TitleContent>
            <DialogContent>
                <MudNumericField @bind-Value="record.Id" For="@(() => record.Id)" Label="Id" ReadOnly="true" />
                <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.Date" For="@(() => record.Date)" Label="Date" />
                <MudTextField @bind-Value="record.Payee" For="@(() => record.Payee)" Label="Payee" />
                <MudCheckBox @bind-Checked="record.Cleared" For="@(() => record.Cleared)" Label="Cleared"></MudCheckBox>
                <MudNumericField @bind-Value="record.Amount" For="@(() => record.Amount)" Label="Amount" />
                <MudNumericField @bind-Value="record.Balance" For="@(() => record.Balance)" Label="Balance" />
                <MudTextField @bind-Value="record.Description" For="@(() => record.Description)" Label="Description" />
                <MudSelect @bind-Value="record.AccountId" For="@(() => record.AccountId)" Label="Account" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="long?" Value="null" />
                    @foreach (var account in accountArray ?? Enumerable.Empty<Account>())
                    {
                        <MudSelectItem Value="@account.Id">@account.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="long?" Label="Category" MultiSelection="true" @bind-SelectedValues="categoryValues" MultiSelectionTextFunc="@(x => string.Join(", ", x.Select(s => categoryArray?.FirstOrDefault(i => i.Id?.ToString() == s)?.Name)))" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var category in categoryArray ?? Enumerable.Empty<Category>())
                    {
                        <MudSelectItem T="long?" Value="@category.Id">@category.Name</MudSelectItem>
                    }
                </MudSelect>

            </DialogContent>
            <DialogActions>
                <MudButton OnClick="OnCancel">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Update</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [Parameter]
    public long Id { get; set; }

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    private Account[]? accountArray;
    private Category[]? categoryArray;
    private IEnumerable<long?>? categoryValues;
    private Transaction? record;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            accountArray = await AppService.ListAccountAsync();
            categoryArray = await AppService.ListCategoryAsync();
            record = await AppService.GetTransactionByIdAsync(Id);
            categoryValues = record?.Category?.Select(x => x.Id).ToHashSet() ?? [];
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        if (record == null)
        {
            return;
        }

        try
        {
            record.Category = categoryValues?.Select(x => new Category { Id = x }).ToList();
            await AppService.UpdateTransactionAsync(Id, record);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }
}
