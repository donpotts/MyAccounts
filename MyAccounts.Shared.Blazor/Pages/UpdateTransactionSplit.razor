@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient
@inject NavigationService NavigationService
@attribute [Authorize(Roles = "Administrator")]

@if (record == null)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Update Transaction Split</MudText>
        </TitleContent>
        <DialogContent>
            <MudText>Loading...</MudText>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton Color="MudBlazor.Color.Primary" Disabled="true">Update</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <EditForm Model="@record" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">Update Transaction Split</MudText>
            </TitleContent>
            <DialogContent>
                @* <MudNumericField @bind-Value="record.Id" For="@(() => record.Id)" Label="Id" ReadOnly="true" /> *@
                <div style="display: flex; align-items: center;">
                    <MudNumericField @bind-Value="record.Amount" For="@(() => record.Amount)" Label="Amount" />
                    <MudButton OnClick="ToggleSign" class="mt-5">-/+</MudButton>
                </div>
                <MudTextField @bind-Value="record.Notes" For="@(() => record.Notes)" Label="Notes" />
                @* <MudSelect @bind-Value="record.TransactionId" For="@(() => record.TransactionId)" Label="Transaction" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="long?" Value="null" />
                    @foreach (var transaction in transactionArray ?? Enumerable.Empty<Transaction>())
                    {
                        <MudSelectItem Value="@transaction.Id">@transaction.Id</MudSelectItem>
                    }
                </MudSelect> *@
                @* <MudSelect @bind-Value="record.CategoryId" For="@(() => record.CategoryId)" Label="Category" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="long?" Value="null" />
                    @foreach (var category in categoryArray ?? Enumerable.Empty<Category>())
                    {
                        if (@category.Name != "Split")
                        {
                            <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                        }
                    }
                </MudSelect> *@
                <MudAutocomplete T="long?" @bind-Value="record.CategoryId" Label="Category" AnchorOrigin="Origin.BottomCenter" SearchFunc="SearchCategories" ToStringFunc="@(id => categoryArray.FirstOrDefault(c => c.Id == id)?.Name)" />
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="OnCancel">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="MudBlazor.Color.Primary">Update</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [Parameter]
    public long Id { get; set; }

    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    //private Transaction[]? transactionArray;
    private Category[]? categoryArray;
    private TransactionSplit? record;

    private void ToggleSign()
    {
        record.Amount = -record.Amount;
    }

    private async Task<IEnumerable<long?>> SearchCategories(string value, CancellationToken cancellationToken)
    {
        var filteredCategories = categoryArray.Where(c => c.Name != "Split");

        if (string.IsNullOrEmpty(value))
            return categoryArray.Select(c => (long?)c.Id);

        return categoryArray
            .Where(c => c.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(c => (long?)c.Id);
    }

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //Log("Start ListTransactionAsync");
            //transactionArray = await AppService.ListTransactionAsync();
            //Log("End ListTransactionAsync");

            categoryArray = await AppService.ListCategoryAsync();
            
            var sortCategory = categoryArray.OrderBy(s => s.Name).ToList();
            categoryArray = sortCategory.ToArray();
            
            record = await AppService.GetTransactionSplitByIdAsync(Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    // private void Log(string message)
    // {
    //     Console.WriteLine($"{DateTime.Now}: {message}");
    // }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        if (record == null)
        {
            return;
        }

        try
        {
            await AppService.UpdateTransactionSplitAsync(Id, record);
            MudDialog?.Close();
            NavigationService.NotifyStateChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }
}
